import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import Command, CommandStart
from aiogram.enums.chat_type import ChatType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –î–ª—è —Å–≤—è–∑–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
questions_map = {}  # {message_id_in_group: (user_id, original_question)}

class States(StatesGroup):
    waiting_for_question = State()
    waiting_for_feedback = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
        ],
        resize_keyboard=True
    )

def get_feedback_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]
        ],
        resize_keyboard=True
    )

# –°—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!",
        reply_markup=get_main_menu_kb()
    )

# –ù–∞—á–∞–ª–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message, state: FSMContext):
    await state.set_state(States.waiting_for_question)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

# –û—Ç–º–µ–Ω–∞
@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(Command("cancel"))
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_kb()
    )

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É
@router.message(States.waiting_for_question)
async def forward_question(message: Message, state: FSMContext):
    user_name = message.from_user.full_name
    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {user_name}:\n\n{message.text}"
    
    sent_message = await bot.send_message(GROUP_ID, question_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    questions_map[sent_message.message_id] = (message.from_user.id, message.text)
    
    await state.clear()
    await message.answer(
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
@router.message(F.chat.type.in_({"group", "supergroup"}), F.reply_to_message)
async def handle_group_reply(message: Message):
    replied_msg = message.reply_to_message
    if replied_msg.message_id not in questions_map:
        return
    
    user_id, original_question = questions_map[replied_msg.message_id]
    response_text = (
        f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n"
        f"‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: {original_question}\n\n"
        f"üì© –û—Ç–≤–µ—Ç: {message.text}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
    )
    
    try:
        await bot.send_message(
            user_id, 
            response_text,
            reply_markup=get_feedback_menu_kb()
        )
        await bot.send_message(user_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?")
    except Exception:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@router.message(F.text == "–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å")
async def ask_another_question(message: Message, state: FSMContext):
    await ask_question(message, state)

@router.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def finish_dialog(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_menu_kb()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())