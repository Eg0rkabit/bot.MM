import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from keyboards import main_menu_kb, back_kb
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))

if not TOKEN or not GROUP_ID:
    raise ValueError("BOT_TOKEN –∏–ª–∏ GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

class QuestionForm(StatesGroup):
    waiting_for_question = State()

class ConsultationForm(StatesGroup):
    waiting_for_message = State()

bot = Bot(token=TOKEN)
bot.default_parse_mode = ParseMode.HTML
dp = Dispatcher(storage=MemoryStorage())

user_question_map = {}

@dp.message(Command("start"))
async def start_cmd(message: Message):
    if message.chat.type != "private":
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb)

@dp.message(lambda m: m.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message, state: FSMContext):
    if message.chat.type != "private":
        return
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª:", reply_markup=back_kb)
    await state.set_state(QuestionForm.waiting_for_question)

@dp.message(QuestionForm.waiting_for_question)
async def receive_question(message: Message, state: FSMContext):
    if message.chat.type != "private":
        return
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb)
        return

    sent_msg = await bot.send_message(
        GROUP_ID,
        f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç <b>{message.from_user.full_name}</b> (id: {message.from_user.id}):\n\n{message.text}"
    )

    user_question_map[sent_msg.message_id] = message.from_user.id
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_menu_kb)
    await state.clear()

@dp.message(lambda m: m.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
async def consultation(message: Message, state: FSMContext):
    await message.answer(
        "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –ù–∞—Ç–∞–ª—å–µ:\n"
        "https://t.me/n_a_loginova"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª.",
        reply_markup=back_kb
    )

@dp.message(ConsultationForm.waiting_for_message)
async def receive_consultation_message(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb)
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

@dp.message(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb)

@dp.message()
async def handle_group_reply(message: Message):
    if message.chat.id == GROUP_ID and message.reply_to_message:
        original_id = message.reply_to_message.message_id
        if original_id in user_question_map:
            user_id = user_question_map[original_id]
            await bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.text}")

if __name__ == "__main__":
    dp.run_polling(bot)
