from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = '8039143820:AAG2J9_MoEDPjPPrfzPAm2aesKscGGfgiZY'
GROUP_ID = -1002811063230  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã —Å –º–∏–Ω—É—Å–æ–º

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# message_id –≤ –≥—Ä—É–ø–ø–µ -> user_id
message_map = {}

class AskQuestion(StatesGroup):
    waiting_for_question = State()

@dp.message_handler(commands='start')
async def start(message: types.Message):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'ask')
async def ask_question(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
    await AskQuestion.waiting_for_question.set()
    await callback.answer()

@dp.message_handler(state=AskQuestion.waiting_for_question, content_types=types.ContentTypes.TEXT)
async def receive_question(message: types.Message, state: FSMContext):
    await state.finish()
    sent = await bot.send_message(
        GROUP_ID,
        f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or message.from_user.id}:\n{message.text}"
    )
    message_map[sent.message_id] = message.from_user.id
    await message.reply("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.")

@dp.message_handler(lambda m: m.chat.id == GROUP_ID and m.reply_to_message, content_types=types.ContentTypes.TEXT)
async def forward_answer_to_user(message: types.Message):
    original_id = message.reply_to_message.message_id
    user_id = message_map.get(original_id)

    if user_id:
        await bot.send_message(
            user_id,
            f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{message.text}"
        )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
