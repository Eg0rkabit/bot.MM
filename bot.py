import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ChatType
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)
questions_db = {}

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
        types.KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º")
    )
    return builder.as_markup(resize_keyboard=True)

def back_button():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return builder.as_markup(resize_keyboard=True)

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await start(message)

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question_handler(message: types.Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=back_button()
    )

# ===== –ü–ï–†–ï–°–´–õ–ö–ê –í–û–ü–†–û–°–û–í –í –ì–†–£–ü–ü–£ =====
@dp.message(F.chat.type == ChatType.PRIVATE, F.text)
async def forward_question(message: types.Message):
    if message.text in ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", "‚óÄÔ∏è –ù–∞–∑–∞–¥"]:
        return
        
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
        question_text = (
            f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {message.from_user.full_name}\n"
            f"üë§ @{message.from_user.username or '–Ω–µ—Ç'}\n"
            f"üÜî {message.from_user.id}\n\n"
            f"üìÑ {message.text}"
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å"
        reply_markup = InlineKeyboardBuilder()
        reply_markup.button(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        sent_msg = await bot.send_message(
            chat_id=int(os.getenv("GROUP_ID")),
            text=question_text,
            reply_markup=reply_markup.as_markup()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
        questions_db[sent_msg.message_id] = message.from_user.id
        
        await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_menu())
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í –ò–ó –ì–†–£–ü–ü–´ =====
@dp.callback_query(F.data.startswith("reply_"))
async def reply_handler(callback: types.CallbackQuery):
    await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

@dp.message(F.chat.id == int(os.getenv("GROUP_ID")), F.reply_to_message)
async def send_reply(message: types.Message):
    if message.reply_to_message.message_id in questions_db:
        user_id = questions_db[message.reply_to_message.message_id]
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.text}"
            )
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())