import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import Command, CommandStart
from aiogram.enums import ChatType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

questions_map = {}  # {group_message_id: (user_id, question_text)}

class States(StatesGroup):
    waiting_for_question = State()

def get_main_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]],
        resize_keyboard=True
    )

def get_waiting_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

@router.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
        reply_markup=get_main_menu_kb()
    )

@router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message, state: FSMContext):
    await state.set_state(States.waiting_for_question)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(F.text.in_({"–û—Ç–º–µ–Ω–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"}))
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_kb()
    )

@router.message(States.waiting_for_question, F.chat.type == ChatType.PRIVATE)
async def forward_question(message: Message, state: FSMContext):
    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{message.text}"
    sent = await bot.send_message(GROUP_ID, question_text)
    questions_map[sent.message_id] = (message.from_user.id, message.text)
    
    await state.clear()
    await message.answer(
        "‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=get_waiting_kb()
    )

@router.message(
    F.chat.id == GROUP_ID,
    F.reply_to_message,
    F.reply_to_message.from_user.id == bot.id
)
async def handle_group_reply(message: Message):
    if message.reply_to_message.message_id not in questions_map:
        return
    
    user_id, original_question = questions_map[message.reply_to_message.message_id]
    response_text = f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.text}"
    
    try:
        await bot.send_message(user_id, response_text, reply_markup=get_main_menu_kb())
    except Exception:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())