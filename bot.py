import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤
questions_db = {}

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ù–∞—Ç–∞–ª—å–µ"),
        types.KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º")
    )
    return builder.as_markup(resize_keyboard=True)

def back_button():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return builder.as_markup(resize_keyboard=True)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await start(message)

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ù–∞—Ç–∞–ª—å–µ")
async def ask_question_handler(message: types.Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=back_button()
    )

@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º")
async def appointment_handler(message: types.Message):
    await message.answer(
        "–§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=back_button()
    )

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≥—Ä—É–ø–ø—É
@dp.message(F.text & ~F.text.in_(["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ù–∞—Ç–∞–ª—å–µ", "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", "‚óÄÔ∏è –ù–∞–∑–∞–¥"]))
async def forward_question(message: types.Message):
    user = message.from_user
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    question_text = (
        f"‚ùì <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b>\n"
        f"üë§ {user.full_name}\n"
        f"üÜî {user.id}\n"
        f"üì± @{user.username}\n\n"
        f"üìÑ {message.text}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å"
    reply_markup = InlineKeyboardBuilder()
    reply_markup.button(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    sent_msg = await bot.send_message(
        chat_id=GROUP_ID,
        text=question_text,
        reply_markup=reply_markup.as_markup()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
    questions_db[sent_msg.message_id] = {
        "user_id": user.id,
        "question": message.text
    }
    
    await message.answer(
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
@dp.callback_query(F.data.startswith("reply_"))
async def reply_handler(callback: types.CallbackQuery):
    await callback.message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=back_button()
    )
    questions_db[callback.message.message_id]["admin_msg"] = callback.message

@dp.message(F.chat.id == GROUP_ID & F.reply_to_message)
async def send_reply(message: types.Message):
    if message.reply_to_message.message_id in questions_db:
        question_data = questions_db[message.reply_to_message.message_id]
        try:
            await bot.send_message(
                chat_id=question_data["user_id"],
                text=f"üì® <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n{message.text}"
            )
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ===== –ó–ê–ü–£–°–ö =====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())