import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
GROUP_ID = int(os.getenv("GROUP_ID"))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–≤—è–∑–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
questions_db = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ù–∞—Ç–∞–ª—å–µ"),
        types.KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º")
    )
    return builder.as_markup(resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
def back_button():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ù–∞—Ç–∞–ª—å–µ")
async def ask_question(message: types.Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ù–∞—Ç–∞–ª—å–µ:",
        reply_markup=back_button()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É
@dp.message(F.text & ~F.text.in_(["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ù–∞—Ç–∞–ª—å–µ", "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", "‚óÄÔ∏è –ù–∞–∑–∞–¥"]))
async def forward_question(message: types.Message):
    user = message.from_user
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    question_text = (
        f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {user.full_name}\n"
        f"üë§ @{user.username}\n"
        f"üì± {user.id}\n\n"
        f"üìÑ {message.text}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    reply_markup = InlineKeyboardBuilder()
    reply_markup.button(
        text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", 
        callback_data=f"reply_{user.id}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    sent_msg = await bot.send_message(
        chat_id=GROUP_ID,
        text=question_text,
        reply_markup=reply_markup.as_markup()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
    questions_db[sent_msg.message_id] = {
        "user_id": user.id,
        "question": message.text
    }
    
    await message.answer(
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ù–∞—Ç–∞–ª—å–µ!",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
@dp.callback_query(F.data.startswith("reply_"))
async def reply_to_question(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await callback.message.reply(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=back_button()
    )
    questions_db[callback.message.message_id]["admin_msg"] = callback.message

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(F.chat.id == GROUP_ID & F.reply_to_message)
async def send_reply(message: types.Message):
    if message.reply_to_message.message_id in questions_db:
        question_data = questions_db[message.reply_to_message.message_id]
        try:
            await bot.send_message(
                chat_id=question_data["user_id"],
                text=f"üì® –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.text}"
            )
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())