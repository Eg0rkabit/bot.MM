import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from keyboards import main_menu_kb, back_kb
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class QuestionForm(StatesGroup):
    waiting_for_question = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–≤—è–∑–∏ user_id ‚Üî message_id –≤ –≥—Ä—É–ø–ø–µ
user_question_map = {}

# /start
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb)

# –í—ã–±–æ—Ä "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@dp.message(lambda m: m.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª:", reply_markup=back_kb)
    await state.set_state(QuestionForm.waiting_for_question)

# –ü—Ä–∏—ë–º –≤–æ–ø—Ä–æ—Å–∞
@dp.message(QuestionForm.waiting_for_question)
async def receive_question(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb)
        return

    sent_msg = await bot.send_message(
        GROUP_ID,
        f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç <b>{message.from_user.full_name}</b> (id: {message.from_user.id}):\n\n{message.text}"
    )

    user_question_map[sent_msg.message_id] = message.from_user.id
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_menu_kb)
    await state.clear()

# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø–µ
@dp.message()
async def handle_group_reply(message: Message):
    if message.chat.id == GROUP_ID and message.reply_to_message:
        original_id = message.reply_to_message.message_id
        if original_id in user_question_map:
            user_id = user_question_map[original_id]
            await bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message.text}")

if __name__ == "__main__":
    dp.run_polling(bot)
